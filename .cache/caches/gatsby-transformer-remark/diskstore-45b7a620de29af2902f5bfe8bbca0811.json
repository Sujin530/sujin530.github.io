{"expireTime":9007200896903336000,"key":"transformer-remark-markdown-ast-f7aa2df37ee336c1fbca8a41d601333c-gatsby-remark-imagesgatsby-remark-table-of-contentsgatsby-remark-prismjsgatsby-remark-autolink-headersgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"link","url":"#세그먼트-트리란","title":null,"children":[],"data":{"hProperties":{"aria-label":"세그먼트 트리란 permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"세그먼트 트리란?","position":{"start":{"line":2,"column":4,"offset":4},"end":{"line":2,"column":13,"offset":13}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":13,"offset":13}},"data":{"id":"세그먼트-트리란","htmlAttributes":{"id":"세그먼트-트리란"},"hProperties":{"id":"세그먼트-트리란","style":"position:relative;"}}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"세그먼트 트리는 트리의 각 노드에 어레이 부분부분의 연산 결과를 미리 저장해놓으므로써 ","position":{"start":{"line":4,"column":3,"offset":17},"end":{"line":4,"column":51,"offset":65}}},{"type":"strong","children":[{"type":"text","value":"탐색 시간을 OlogN)으로 감소","position":{"start":{"line":4,"column":53,"offset":67},"end":{"line":4,"column":71,"offset":85}}}],"position":{"start":{"line":4,"column":51,"offset":65},"end":{"line":4,"column":73,"offset":87}}},{"type":"text","value":"시켜준다.","position":{"start":{"line":4,"column":73,"offset":87},"end":{"line":4,"column":78,"offset":92}}}],"position":{"start":{"line":4,"column":3,"offset":17},"end":{"line":4,"column":78,"offset":92}}}],"position":{"start":{"line":4,"column":1,"offset":15},"end":{"line":4,"column":78,"offset":92}}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"주로 부분합, 부분최소, 최대값을 찾는데 사용된다.","position":{"start":{"line":5,"column":3,"offset":95},"end":{"line":5,"column":31,"offset":123}}}],"position":{"start":{"line":5,"column":3,"offset":95},"end":{"line":5,"column":31,"offset":123}}}],"position":{"start":{"line":5,"column":1,"offset":93},"end":{"line":5,"column":31,"offset":123}}}],"position":{"start":{"line":4,"column":1,"offset":15},"end":{"line":5,"column":31,"offset":123}}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#세그먼트-트리-구조","title":null,"children":[],"data":{"hProperties":{"aria-label":"세그먼트 트리 구조 permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"세그먼트 트리 구조","position":{"start":{"line":7,"column":4,"offset":128},"end":{"line":7,"column":14,"offset":138}}}],"position":{"start":{"line":7,"column":1,"offset":125},"end":{"line":7,"column":14,"offset":138}},"data":{"id":"세그먼트-트리-구조","htmlAttributes":{"id":"세그먼트-트리-구조"},"hProperties":{"id":"세그먼트-트리-구조","style":"position:relative;"}}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"세그먼트 트리의 리프 노드와 나머지 노드는 다음과 같은 의미를 가진다.","position":{"start":{"line":9,"column":3,"offset":142},"end":{"line":9,"column":42,"offset":181}}}],"position":{"start":{"line":9,"column":3,"offset":142},"end":{"line":9,"column":42,"offset":181}}}],"position":{"start":{"line":9,"column":1,"offset":140},"end":{"line":9,"column":42,"offset":181}}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"리프 노드 : 해당 어레이 값","position":{"start":{"line":10,"column":3,"offset":184},"end":{"line":10,"column":19,"offset":200}}}],"position":{"start":{"line":10,"column":3,"offset":184},"end":{"line":10,"column":19,"offset":200}}}],"position":{"start":{"line":10,"column":1,"offset":182},"end":{"line":10,"column":19,"offset":200}}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"다른 노드 : 오른쪽 자식과 왼쪽 자식을 연산한 결과 값","position":{"start":{"line":11,"column":3,"offset":203},"end":{"line":11,"column":34,"offset":234}}}],"position":{"start":{"line":11,"column":3,"offset":203},"end":{"line":11,"column":34,"offset":234}}}],"position":{"start":{"line":11,"column":1,"offset":201},"end":{"line":11,"column":34,"offset":234}}}],"position":{"start":{"line":9,"column":1,"offset":140},"end":{"line":11,"column":34,"offset":234}}},{"type":"paragraph","children":[{"type":"text","value":"구조는 아래와 같은 구조를 가지게 된다.","position":{"start":{"line":13,"column":1,"offset":236},"end":{"line":13,"column":23,"offset":258}}}],"position":{"start":{"line":13,"column":1,"offset":236},"end":{"line":13,"column":23,"offset":258}}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://raw.githubusercontent.com/zoomKoding/zoomKoding.github.io/source/assets/_posts/segment-tree-1.png","alt":"사진","position":{"start":{"line":15,"column":1,"offset":260},"end":{"line":15,"column":113,"offset":372}}}],"position":{"start":{"line":15,"column":1,"offset":260},"end":{"line":15,"column":113,"offset":372}}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#세그먼트-트리-만들기합-구하기용","title":null,"children":[],"data":{"hProperties":{"aria-label":"세그먼트 트리 만들기합 구하기용 permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"세그먼트 트리 만들기(합 구하기용)","position":{"start":{"line":17,"column":4,"offset":377},"end":{"line":17,"column":23,"offset":396}}}],"position":{"start":{"line":17,"column":1,"offset":374},"end":{"line":17,"column":23,"offset":396}},"data":{"id":"세그먼트-트리-만들기합-구하기용","htmlAttributes":{"id":"세그먼트-트리-만들기합-구하기용"},"hProperties":{"id":"세그먼트-트리-만들기합-구하기용","style":"position:relative;"}}},{"type":"html","lang":"cpp","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// a: 배열 a</span>\n<span class=\"token comment\">// tree: 세그먼트 트리</span>\n<span class=\"token comment\">// node: 세그먼트 트리 노드 번호</span>\n<span class=\"token comment\">// node가 담당하는 합의 범위가 start ~ end</span>\n<span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>tree<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> start<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">==</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> tree<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> tree<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> tree<span class=\"token punctuation\">,</span> node<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>start<span class=\"token operator\">+</span>end<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> tree<span class=\"token punctuation\">,</span> node<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>start<span class=\"token operator\">+</span>end<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":19,"column":1,"offset":398},"end":{"line":31,"column":4,"offset":790}}},{"type":"paragraph","children":[{"type":"text","value":"만약 node를 root node로 주고 start, end를 어레이 전체 범위로 잡게 되면 리컬션을 통해 tree가 완성 된다.","position":{"start":{"line":33,"column":1,"offset":792},"end":{"line":33,"column":73,"offset":864}}}],"position":{"start":{"line":33,"column":1,"offset":792},"end":{"line":33,"column":73,"offset":864}}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#세그먼트-트리-탐색합-구하기용","title":null,"children":[],"data":{"hProperties":{"aria-label":"세그먼트 트리 탐색합 구하기용 permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"세그먼트 트리 탐색(합 구하기용)","position":{"start":{"line":35,"column":4,"offset":869},"end":{"line":35,"column":22,"offset":887}}}],"position":{"start":{"line":35,"column":1,"offset":866},"end":{"line":35,"column":22,"offset":887}},"data":{"id":"세그먼트-트리-탐색합-구하기용","htmlAttributes":{"id":"세그먼트-트리-탐색합-구하기용"},"hProperties":{"id":"세그먼트-트리-탐색합-구하기용","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"만약 어레이 원소가 10개라고 할 때 0-9까지 모든 원소의 합을 찾고 싶다고 하면 아래와 같이 루트 노드만 확인하면 될 것이다.","position":{"start":{"line":37,"column":1,"offset":889},"end":{"line":37,"column":73,"offset":961}}}],"position":{"start":{"line":37,"column":1,"offset":889},"end":{"line":37,"column":73,"offset":961}}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://raw.githubusercontent.com/zoomKoding/zoomKoding.github.io/source/assets/_posts/segment-tree-2.png","alt":"사진","position":{"start":{"line":39,"column":1,"offset":963},"end":{"line":39,"column":113,"offset":1075}}}],"position":{"start":{"line":39,"column":1,"offset":963},"end":{"line":39,"column":113,"offset":1075}}},{"type":"paragraph","children":[{"type":"text","value":"하지만 만약에 2~4까지 범위의 합을 구하고 싶다고 하면 아래와 같이 두개의 원소를 확인하면 될 것이다.","position":{"start":{"line":41,"column":1,"offset":1077},"end":{"line":41,"column":59,"offset":1135}}}],"position":{"start":{"line":41,"column":1,"offset":1077},"end":{"line":41,"column":59,"offset":1135}}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://raw.githubusercontent.com/zoomKoding/zoomKoding.github.io/source/assets/_posts/segment-tree-3.png","alt":"사진","position":{"start":{"line":43,"column":1,"offset":1137},"end":{"line":43,"column":113,"offset":1249}}}],"position":{"start":{"line":43,"column":1,"offset":1137},"end":{"line":43,"column":113,"offset":1249}}},{"type":"paragraph","children":[{"type":"text","value":"그래서 만약 노드가 담당하는 구간을 [start, end] 라고 하고 합을 구해야하는 구간을 [left, right] 이라 하면 경우는 4가지고 나누어 진다.","position":{"start":{"line":45,"column":1,"offset":1251},"end":{"line":45,"column":89,"offset":1339}}}],"position":{"start":{"line":45,"column":1,"offset":1251},"end":{"line":45,"column":89,"offset":1339}}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"[left, right]와 [start, end]가 겹치지 않는 경우","position":{"start":{"line":47,"column":4,"offset":1344},"end":{"line":47,"column":42,"offset":1382}}}],"position":{"start":{"line":47,"column":4,"offset":1344},"end":{"line":47,"column":42,"offset":1382}}}],"position":{"start":{"line":47,"column":1,"offset":1341},"end":{"line":47,"column":42,"offset":1382}}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"[left, right]가 [start, end]를 완전 커버하는 경우","position":{"start":{"line":48,"column":4,"offset":1386},"end":{"line":48,"column":43,"offset":1425}}}],"position":{"start":{"line":48,"column":4,"offset":1386},"end":{"line":48,"column":43,"offset":1425}}}],"position":{"start":{"line":48,"column":1,"offset":1383},"end":{"line":48,"column":43,"offset":1425}}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"[start, end]가 [left, right]를 완전히 커버하는 경우","position":{"start":{"line":49,"column":4,"offset":1429},"end":{"line":49,"column":44,"offset":1469}}}],"position":{"start":{"line":49,"column":4,"offset":1429},"end":{"line":49,"column":44,"offset":1469}}}],"position":{"start":{"line":49,"column":1,"offset":1426},"end":{"line":49,"column":44,"offset":1469}}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"[left, right]와 [start, end]가 부분적으로 겹쳐져 있는 경우","position":{"start":{"line":50,"column":4,"offset":1473},"end":{"line":50,"column":48,"offset":1517}}}],"position":{"start":{"line":50,"column":4,"offset":1473},"end":{"line":50,"column":48,"offset":1517}}}],"position":{"start":{"line":50,"column":1,"offset":1470},"end":{"line":50,"column":48,"offset":1517}}}],"position":{"start":{"line":47,"column":1,"offset":1341},"end":{"line":50,"column":48,"offset":1517}}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"1번 : 무관하기 때문에 합을 구한다고 하면 0을 return하면 된다.","position":{"start":{"line":52,"column":3,"offset":1521},"end":{"line":52,"column":43,"offset":1561}}}],"position":{"start":{"line":52,"column":3,"offset":1521},"end":{"line":52,"column":43,"offset":1561}}}],"position":{"start":{"line":52,"column":1,"offset":1519},"end":{"line":52,"column":43,"offset":1561}}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"2번 : 더이상 탐색해도 의미가 없기 때문에 현재 노드 값을 return한다.","position":{"start":{"line":53,"column":3,"offset":1564},"end":{"line":53,"column":46,"offset":1607}}}],"position":{"start":{"line":53,"column":3,"offset":1564},"end":{"line":53,"column":46,"offset":1607}}}],"position":{"start":{"line":53,"column":1,"offset":1562},"end":{"line":53,"column":46,"offset":1607}}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"3번,4번 : 더 쪼개서 다시 탐색을 진행한다.","position":{"start":{"line":54,"column":3,"offset":1610},"end":{"line":54,"column":29,"offset":1636}}}],"position":{"start":{"line":54,"column":3,"offset":1610},"end":{"line":54,"column":29,"offset":1636}}}],"position":{"start":{"line":54,"column":1,"offset":1608},"end":{"line":54,"column":29,"offset":1636}}}],"position":{"start":{"line":52,"column":1,"offset":1519},"end":{"line":54,"column":29,"offset":1636}}},{"type":"paragraph","children":[{"type":"text","value":"코드는 아래와 같다.","position":{"start":{"line":56,"column":1,"offset":1638},"end":{"line":56,"column":12,"offset":1649}}}],"position":{"start":{"line":56,"column":1,"offset":1638},"end":{"line":56,"column":12,"offset":1649}}},{"type":"html","lang":"cpp","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// node가 담당하는 구간이 start~end이고, 구해야하는 합의 범위는 left~right</span>\n<span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>tree<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> start<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> end<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">></span> end <span class=\"token operator\">||</span> right <span class=\"token operator\">&lt;</span> start<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;=</span> start <span class=\"token operator\">&amp;&amp;</span> end <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> tree<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">,</span> node<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>start<span class=\"token operator\">+</span>end<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">,</span> node<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>start<span class=\"token operator\">+</span>end<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":58,"column":1,"offset":1651},"end":{"line":69,"column":4,"offset":2069}}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#6549번-히스토그램에서-가장-큰-직사각형","title":null,"children":[],"data":{"hProperties":{"aria-label":"6549번 히스토그램에서 가장 큰 직사각형 permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"6549번 히스토그램에서 가장 큰 직사각형","position":{"start":{"line":71,"column":4,"offset":2074},"end":{"line":71,"column":27,"offset":2097}}}],"position":{"start":{"line":71,"column":1,"offset":2071},"end":{"line":71,"column":27,"offset":2097}},"data":{"id":"6549번-히스토그램에서-가장-큰-직사각형","htmlAttributes":{"id":"6549번-히스토그램에서-가장-큰-직사각형"},"hProperties":{"id":"6549번-히스토그램에서-가장-큰-직사각형","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"이 문제에서는 각 segment의 최솟값을 저장해서 ","position":{"start":{"line":73,"column":1,"offset":2099},"end":{"line":73,"column":30,"offset":2128}}},{"type":"strong","children":[{"type":"text","value":"최솟값을 더 빨리 찾기 위해","position":{"start":{"line":73,"column":32,"offset":2130},"end":{"line":73,"column":47,"offset":2145}}}],"position":{"start":{"line":73,"column":30,"offset":2128},"end":{"line":73,"column":49,"offset":2147}}},{"type":"text","value":" 세그먼트 트리가 사용되었다.","position":{"start":{"line":73,"column":49,"offset":2147},"end":{"line":73,"column":65,"offset":2163}}}],"position":{"start":{"line":73,"column":1,"offset":2099},"end":{"line":73,"column":65,"offset":2163}}},{"type":"paragraph","children":[{"type":"text","value":"코드는 다음과 같다.","position":{"start":{"line":75,"column":1,"offset":2165},"end":{"line":75,"column":12,"offset":2176}}}],"position":{"start":{"line":75,"column":1,"offset":2165},"end":{"line":75,"column":12,"offset":2176}}},{"type":"html","lang":"cpp","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cmath></span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> input<span class=\"token punctuation\">,</span> answer <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">find_min</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>tree<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> start<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> end<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">></span> end <span class=\"token operator\">||</span> right <span class=\"token operator\">&lt;</span> start<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;=</span> start <span class=\"token operator\">&amp;&amp;</span> end <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> tree<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> c1 <span class=\"token operator\">=</span> <span class=\"token function\">find_min</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> tree<span class=\"token punctuation\">,</span> node<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>start<span class=\"token operator\">+</span>end<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> c2 <span class=\"token operator\">=</span> <span class=\"token function\">find_min</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> tree<span class=\"token punctuation\">,</span> node<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>start<span class=\"token operator\">+</span>end<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>c1 <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> c2<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>c2 <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> c1<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">[</span>c1<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>c2<span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> c1 <span class=\"token operator\">:</span> c2<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token function\">div_and_conq</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>v<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> min <span class=\"token operator\">=</span> <span class=\"token function\">find_min</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> tree<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> box <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>v<span class=\"token punctuation\">[</span>min<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>right<span class=\"token operator\">-</span>left<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;=</span> min <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> temp <span class=\"token operator\">=</span> <span class=\"token function\">div_and_conq</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> min <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>box <span class=\"token operator\">&lt;</span> temp<span class=\"token punctuation\">)</span> box <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>min <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> temp <span class=\"token operator\">=</span> <span class=\"token function\">div_and_conq</span><span class=\"token punctuation\">(</span>min <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>box <span class=\"token operator\">&lt;</span> temp<span class=\"token punctuation\">)</span> box <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> box<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// a: 배열 a</span>\n<span class=\"token comment\">// tree: 세그먼트 트리</span>\n<span class=\"token comment\">// node: 세그먼트 트리 노드 번호</span>\n<span class=\"token comment\">// node가 담당하는 합의 범위가 start ~ end</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>tree<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> start<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>start <span class=\"token operator\">==</span> end<span class=\"token punctuation\">)</span> tree<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> tree<span class=\"token punctuation\">,</span> node<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>start<span class=\"token operator\">+</span>end<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> tree<span class=\"token punctuation\">,</span> node<span class=\"token operator\">*</span><span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>start<span class=\"token operator\">+</span>end<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        tree<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>tree<span class=\"token punctuation\">[</span>node<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>tree<span class=\"token punctuation\">[</span>node<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> tree<span class=\"token punctuation\">[</span>node<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> tree<span class=\"token punctuation\">[</span>node<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        answer <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> h <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span><span class=\"token function\">log2</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1e-9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> tree_size <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>h<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">v</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">tree</span><span class=\"token punctuation\">(</span>tree_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> tree<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">div_and_conq</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":77,"column":1,"offset":2178},"end":{"line":142,"column":4,"offset":4053}}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#주의할점","title":null,"children":[],"data":{"hProperties":{"aria-label":"주의할점 permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"주의할점","position":{"start":{"line":144,"column":4,"offset":4058},"end":{"line":144,"column":8,"offset":4062}}}],"position":{"start":{"line":144,"column":1,"offset":4055},"end":{"line":144,"column":8,"offset":4062}},"data":{"id":"주의할점","htmlAttributes":{"id":"주의할점"},"hProperties":{"id":"주의할점","style":"position:relative;"}}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"벡터를 복사할 거 아니면 parameter로 쓸 때 &를 붙여줘라. 복사하는데 시간이 또 소모된다.","position":{"start":{"line":146,"column":3,"offset":4066},"end":{"line":146,"column":58,"offset":4121}}}],"position":{"start":{"line":146,"column":3,"offset":4066},"end":{"line":146,"column":58,"offset":4121}}}],"position":{"start":{"line":146,"column":1,"offset":4064},"end":{"line":146,"column":58,"offset":4121}}}],"position":{"start":{"line":146,"column":1,"offset":4064},"end":{"line":146,"column":58,"offset":4121}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":147,"column":1,"offset":4122}}}}