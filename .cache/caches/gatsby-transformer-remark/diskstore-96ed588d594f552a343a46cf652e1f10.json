{"expireTime":9007200896899831000,"key":"transformer-remark-markdown-html-83dd4817a59dd9b09e405b3949743fe6-gatsby-remark-imagesgatsby-remark-table-of-contentsgatsby-remark-prismjsgatsby-remark-autolink-headersgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":"<h2 id=\"minimum-spanning-tree란\" style=\"position:relative;\"><a href=\"#minimum-spanning-tree%EB%9E%80\" aria-label=\"minimum spanning tree란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Minimum Spanning Tree란?</h2>\n<ul>\n<li>Minimum Spanning Tree란 Undirected Graph 내에서 Cycle이 발생하지 않는 한도 내에서 모든 vertex가 연결되있는 tree 중 weight의 합이 가장 작은 tree를 의미한다.</li>\n<li>그렇기 때문에 무조건 Edge의 갯수는 Vertex 갯수 - 1 개이다.</li>\n</ul>\n<h2 id=\"어떻게-찾지\" style=\"position:relative;\"><a href=\"#%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%B0%BE%EC%A7%80\" aria-label=\"어떻게 찾지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>어떻게 찾지?</h2>\n<ul>\n<li>일단 edge의 set인 A를 만들자</li>\n<li>처음에 A가 빈 상태에서 하나씩 넣은 거다.</li>\n<li>여기서 중요한 것은 <strong>safe edge</strong>만 넣는다.</li>\n<li>Safe Edge란 A가 MST의 subset이라면 A를 추가해도 MST의 subset을 유지할 때의 Edge를 의미한다.</li>\n</ul>\n<h2 id=\"kruskal-알고리즘의-기본-개념\" style=\"position:relative;\"><a href=\"#kruskal-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%98-%EA%B8%B0%EB%B3%B8-%EA%B0%9C%EB%85%90\" aria-label=\"kruskal 알고리즘의 기본 개념 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Kruskal 알고리즘의 기본 개념</h2>\n<ul>\n<li>일단 Edge를 다 weight가 작은 순으로 나열한다.</li>\n<li>A라는 숲을 유지한 상태에서 safe edge를 찾아서 추가해준다.</li>\n<li>즉 이 알고리즘은 <strong>GREEDDDY</strong>이다!!!</li>\n</ul>\n<h2 id=\"kruskal-알고리즘-스텝\" style=\"position:relative;\"><a href=\"#kruskal-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%8A%A4%ED%85%9D\" aria-label=\"kruskal 알고리즘 스텝 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Kruskal 알고리즘 스텝</h2>\n<ol>\n<li>edge을 weight 작은 순으로 sorting한다.</li>\n<li>가장 작은 애들을 하나씩 꺼내 cycle이 발생하면 제외, cycle이 안생기면 넣어준다.</li>\n<li>edge 수가 V-1개 가 될 때까지 2번을 반복한다.</li>\n</ol>\n<h2 id=\"kruskal-알고리즘의-방법\" style=\"position:relative;\"><a href=\"#kruskal-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%98-%EB%B0%A9%EB%B2%95\" aria-label=\"kruskal 알고리즘의 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Kruskal 알고리즘의 방법</h2>\n<ul>\n<li>일단 source, destination, weight이 담긴 vector를 sorting한다.</li>\n<li>Cycle이 생기는지 여부는 Union Find를 이용해서 찾도록 하자.</li>\n</ul>\n<h2 id=\"pseudo-코드\" style=\"position:relative;\"><a href=\"#pseudo-%EC%BD%94%EB%93%9C\" aria-label=\"pseudo 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pseudo 코드</h2>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">MST<span class=\"token operator\">-</span><span class=\"token function\">Kruskal</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">)</span>\n    R <span class=\"token operator\">=</span> E<span class=\"token punctuation\">;</span>\n    F <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">While</span> <span class=\"token punctuation\">(</span> R is <span class=\"token operator\">not</span> empty<span class=\"token punctuation\">)</span>\n        Remove the light edge<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> from R<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">)</span> does <span class=\"token operator\">not</span> make a cycle in F<span class=\"token punctuation\">)</span> <span class=\"token function\">Add</span> <span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">)</span> to F<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> F<span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"c-코드\" style=\"position:relative;\"><a href=\"#c-%EC%BD%94%EB%93%9C\" aria-label=\"c 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>C++ 코드</h2>\n<p>프로그래머스 고득점 kit 섬연결 문제 코드를 참고합시다.</p>\n<h2 id=\"느낀점\" style=\"position:relative;\"><a href=\"#%EB%8A%90%EB%82%80%EC%A0%90\" aria-label=\"느낀점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>느낀점</h2>\n<ul>\n<li>솔직히 별로 안어렵다고 생각했는데 Cycle 생기는지 여부구하는거 이해하려고 돌아돌아 Union Find까지 다녀왔다.</li>\n<li>음 일단 많이 배울 수 있음에 감사하고 얼른 써먹어봐야겠다.</li>\n</ul>"}