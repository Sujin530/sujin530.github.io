{"expireTime":9007200896903336000,"key":"transformer-remark-markdown-ast-922c8979a5fb3fe326e793502239e468-gatsby-remark-imagesgatsby-remark-table-of-contentsgatsby-remark-prismjsgatsby-remark-autolink-headersgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"link","url":"#기존-rank-활용-방법","title":null,"children":[],"data":{"hProperties":{"aria-label":"기존 rank 활용 방법 permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"기존 Rank 활용 방법","position":{"start":{"line":2,"column":4,"offset":4},"end":{"line":2,"column":17,"offset":17}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":17,"offset":17}},"data":{"id":"기존-rank-활용-방법","htmlAttributes":{"id":"기존-rank-활용-방법"},"hProperties":{"id":"기존-rank-활용-방법","style":"position:relative;"}}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"이전 포스트에서 그림으로 표현했듯이, union과 find를 계속 진행하다보면 worst case에서는 그림과 같이 나오게 된다.","position":{"start":{"line":4,"column":3,"offset":21},"end":{"line":4,"column":75,"offset":93}}}],"position":{"start":{"line":4,"column":3,"offset":21},"end":{"line":4,"column":75,"offset":93}}}],"position":{"start":{"line":4,"column":1,"offset":19},"end":{"line":4,"column":75,"offset":93}}}],"position":{"start":{"line":4,"column":1,"offset":19},"end":{"line":4,"column":75,"offset":93}}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://raw.githubusercontent.com/zoomKoding/zoomKoding.github.io/source/assets/_posts/union-find-2.jpeg","alt":"사진","position":{"start":{"line":6,"column":1,"offset":95},"end":{"line":6,"column":112,"offset":206}}}],"position":{"start":{"line":6,"column":1,"offset":95},"end":{"line":6,"column":112,"offset":206}}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"그림과 같이 작은 트리가 큰 트리에 붙는 형식으로 이는 Linked List의 형태를 띄게 된다.","position":{"start":{"line":8,"column":3,"offset":210},"end":{"line":8,"column":57,"offset":264}}}],"position":{"start":{"line":8,"column":3,"offset":210},"end":{"line":8,"column":57,"offset":264}}}],"position":{"start":{"line":8,"column":1,"offset":208},"end":{"line":8,"column":57,"offset":264}}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"이것의 시간 복잡도는 O(log n) 만큼 걸리게 된다.","position":{"start":{"line":9,"column":3,"offset":267},"end":{"line":9,"column":34,"offset":298}}}],"position":{"start":{"line":9,"column":3,"offset":267},"end":{"line":9,"column":34,"offset":298}}}],"position":{"start":{"line":9,"column":1,"offset":265},"end":{"line":9,"column":34,"offset":298}}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"이를 ","position":{"start":{"line":10,"column":3,"offset":301},"end":{"line":10,"column":6,"offset":304}}},{"type":"strong","children":[{"type":"text","value":"union by rank","position":{"start":{"line":10,"column":8,"offset":306},"end":{"line":10,"column":21,"offset":319}}}],"position":{"start":{"line":10,"column":6,"offset":304},"end":{"line":10,"column":23,"offset":321}}},{"type":"text","value":"라고 한다.","position":{"start":{"line":10,"column":23,"offset":321},"end":{"line":10,"column":29,"offset":327}}}],"position":{"start":{"line":10,"column":3,"offset":301},"end":{"line":10,"column":29,"offset":327}}}],"position":{"start":{"line":10,"column":1,"offset":299},"end":{"line":10,"column":29,"offset":327}}}],"position":{"start":{"line":8,"column":1,"offset":208},"end":{"line":10,"column":29,"offset":327}}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#path-compression-활용-방법","title":null,"children":[],"data":{"hProperties":{"aria-label":"path compression 활용 방법 permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Path Compression 활용 방법","position":{"start":{"line":12,"column":4,"offset":332},"end":{"line":12,"column":26,"offset":354}}}],"position":{"start":{"line":12,"column":1,"offset":329},"end":{"line":12,"column":26,"offset":354}},"data":{"id":"path-compression-활용-방법","htmlAttributes":{"id":"path-compression-활용-방법"},"hProperties":{"id":"path-compression-활용-방법","style":"position:relative;"}}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"다른 방법이 또 있다면 ","position":{"start":{"line":14,"column":3,"offset":358},"end":{"line":14,"column":16,"offset":371}}},{"type":"strong","children":[{"type":"text","value":"path compression","position":{"start":{"line":14,"column":18,"offset":373},"end":{"line":14,"column":34,"offset":389}}}],"position":{"start":{"line":14,"column":16,"offset":371},"end":{"line":14,"column":36,"offset":391}}},{"type":"text","value":"이다.","position":{"start":{"line":14,"column":36,"offset":391},"end":{"line":14,"column":39,"offset":394}}}],"position":{"start":{"line":14,"column":3,"offset":358},"end":{"line":14,"column":39,"offset":394}}}],"position":{"start":{"line":14,"column":1,"offset":356},"end":{"line":14,"column":39,"offset":394}}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"이 방법은 find()가 호출될 때 tree를 납짝하게 만드는 것이다.","position":{"start":{"line":15,"column":3,"offset":397},"end":{"line":15,"column":42,"offset":436}}}],"position":{"start":{"line":15,"column":3,"offset":397},"end":{"line":15,"column":42,"offset":436}}}],"position":{"start":{"line":15,"column":1,"offset":395},"end":{"line":15,"column":42,"offset":436}}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"find()가 x에 대해서 호출되면 x로부터 root node를 찾기 시작한다.","position":{"start":{"line":16,"column":3,"offset":439},"end":{"line":16,"column":47,"offset":483}}}],"position":{"start":{"line":16,"column":3,"offset":439},"end":{"line":16,"column":47,"offset":483}}}],"position":{"start":{"line":16,"column":1,"offset":437},"end":{"line":16,"column":47,"offset":483}}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"찾아서 root node를 반환시켜준다.","position":{"start":{"line":17,"column":3,"offset":486},"end":{"line":17,"column":25,"offset":508}}}],"position":{"start":{"line":17,"column":3,"offset":486},"end":{"line":17,"column":25,"offset":508}}}],"position":{"start":{"line":17,"column":1,"offset":484},"end":{"line":17,"column":25,"offset":508}}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"그리고 root node에 이어붙이기 때문에 Rank 활용 때처럼 중간에 있는 친구들을 다 search하지 않아도 된다는 장점이 있다.","position":{"start":{"line":18,"column":3,"offset":511},"end":{"line":18,"column":78,"offset":586}}}],"position":{"start":{"line":18,"column":3,"offset":511},"end":{"line":18,"column":78,"offset":586}}}],"position":{"start":{"line":18,"column":1,"offset":509},"end":{"line":18,"column":78,"offset":586}}}],"position":{"start":{"line":14,"column":1,"offset":356},"end":{"line":18,"column":78,"offset":586}}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Rank와 Path Compression을 활용하면 기존의 방법보다 훨씬 효율적인 코드를 짤 수 있다!","position":{"start":{"line":20,"column":3,"offset":590},"end":{"line":20,"column":60,"offset":647}}}],"position":{"start":{"line":20,"column":1,"offset":588},"end":{"line":20,"column":62,"offset":649}}}],"position":{"start":{"line":20,"column":1,"offset":588},"end":{"line":20,"column":62,"offset":649}}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#rank와-path-compression-활용-코드","title":null,"children":[],"data":{"hProperties":{"aria-label":"rank와 path compression 활용 코드 permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Rank와 Path Compression 활용 코드","position":{"start":{"line":22,"column":4,"offset":654},"end":{"line":22,"column":32,"offset":682}}}],"position":{"start":{"line":22,"column":1,"offset":651},"end":{"line":22,"column":32,"offset":682}},"data":{"id":"rank와-path-compression-활용-코드","htmlAttributes":{"id":"rank와-path-compression-활용-코드"},"hProperties":{"id":"rank와-path-compression-활용-코드","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"이 코드는 기존 코드에 parent와 rank의 정보를 담고 있는 subset이 추가되었다.","position":{"start":{"line":24,"column":1,"offset":684},"end":{"line":24,"column":52,"offset":735}}}],"position":{"start":{"line":24,"column":1,"offset":684},"end":{"line":24,"column":52,"offset":735}}},{"type":"html","lang":"cpp","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//각 Edge의 정보가 담긴 struct이다.</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Edge</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> src<span class=\"token punctuation\">,</span> dest<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//각 Graph의 정보가 담긴 struct이다.</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> V<span class=\"token punctuation\">,</span> E<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Edge</span><span class=\"token operator\">*</span> edge<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//parent와 rank 정보가 담긴 struct이다.</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">subset</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> parent<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> rank<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//Graph를 생성해서 반환해주는 역할을 하는 함수이다.</span>\n<span class=\"token comment\">//V는 vertex 개수, E는 edge의 개수를 의미한다.</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Graph</span><span class=\"token operator\">*</span> <span class=\"token function\">createGraph</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> V<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> E<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">//그래프 공간 할당!</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Graph</span><span class=\"token operator\">*</span> graph <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Graph</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">sizeof</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//그래프의 크기를 주어진 정보를 이용해 정해준다.</span>\n    graph<span class=\"token operator\">-></span>V <span class=\"token operator\">=</span> V<span class=\"token punctuation\">;</span>\n    graph<span class=\"token operator\">-></span>E <span class=\"token operator\">=</span> E<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//그래프의 edge 개수만큼 Edge의 공간을 할당해준다.</span>\n    graph<span class=\"token operator\">-></span>edge <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Edge</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span> <span class=\"token punctuation\">(</span> graph <span class=\"token operator\">-></span> E <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Edge</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//만든 그래프를 반환해준다.</span>\n    <span class=\"token keyword\">return</span> graph<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Path compression의 장점을 활용해 root node를 찾아주는 역할을 하는 친구다.</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">subset</span> subsets<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">//root node가 아니면 root node 찾을 때까지 recursive하세요.</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>subsets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>parent <span class=\"token operator\">!=</span> i<span class=\"token punctuation\">)</span>subsets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>subsets<span class=\"token punctuation\">,</span>subsets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//root node를 반환해주세요.</span>\n    <span class=\"token keyword\">return</span> subsets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//이번에는 rank를 이용해서 합쳐준다.</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Union</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">subset</span> subsets<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">//각각 root node를 찾아줍니다.</span>\n    <span class=\"token keyword\">int</span> xroot <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>subsets<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> yroot <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>subsets<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//root node의 rank에 따라 누가 밑으로 붙을지 정합니다.</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>subsets<span class=\"token punctuation\">[</span>xroot<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rank <span class=\"token operator\">&lt;</span> subsets<span class=\"token punctuation\">[</span>yroot<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rank<span class=\"token punctuation\">)</span> subsets<span class=\"token punctuation\">[</span>xroot<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> yroot<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>subsets<span class=\"token punctuation\">[</span>xroot<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rank <span class=\"token operator\">></span> subsets<span class=\"token punctuation\">[</span>yroot<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rank<span class=\"token punctuation\">)</span> subsets<span class=\"token punctuation\">[</span>yroot<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> xroot<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//두개가 같으면 x를 위로 올려주고 x의 root node rank를 하나 더해줍니다.</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n        subsets<span class=\"token punctuation\">[</span>yroot<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> xroot<span class=\"token punctuation\">;</span>\n        subsets<span class=\"token punctuation\">[</span>xroot<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rank <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">//Cycle을 확인해주는 함수</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">isCycle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Graph</span><span class=\"token operator\">*</span> graph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">int</span> V <span class=\"token operator\">=</span> graph<span class=\"token operator\">-></span>V<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> E <span class=\"token operator\">=</span> graph<span class=\"token operator\">-></span>E<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//subset의 크기를 정해줍니다.</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">subset</span> <span class=\"token operator\">*</span>subsets <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">subset</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span> V <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">subset</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//초기 rank를 0으로 또 parent를 자기 자신으로 즉 자기를 rootnode로 설정한다.</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> v <span class=\"token operator\">&lt;</span> V<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>v<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        subsets<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span>\n        subsets<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rank <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//그래프의 Edge를 쭉 훑어봅시다.</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> e <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> E<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//Edge의 src와 dest node가 같은 graph에 속해있나 봅시다.</span>\n        <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>subsets<span class=\"token punctuation\">,</span> graph<span class=\"token operator\">-></span>edge<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>subsets<span class=\"token punctuation\">,</span> graph<span class=\"token operator\">-></span>edge<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>dest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//같으면 Cycle이 있는겁니다.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//아니면 두 그래프를 합쳐요!</span>\n        <span class=\"token function\">Union</span><span class=\"token punctuation\">(</span>subsets<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> V <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> E <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Graph</span><span class=\"token operator\">*</span> graph <span class=\"token operator\">=</span> <span class=\"token function\">createGraph</span><span class=\"token punctuation\">(</span>V<span class=\"token punctuation\">,</span> E<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// add edge 0-1</span>\n    graph<span class=\"token operator\">-></span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    graph<span class=\"token operator\">-></span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>dest <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// add edge 1-2</span>\n    graph<span class=\"token operator\">-></span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    graph<span class=\"token operator\">-></span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>dest <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// add edge 0-2</span>\n    graph<span class=\"token operator\">-></span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    graph<span class=\"token operator\">-></span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>dest <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isCycle</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"사이클 있어요~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"사이클 없어요~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":26,"column":1,"offset":737},"end":{"line":142,"column":4,"offset":3337}}},{"type":"paragraph","children":[{"type":"text","value":"위 과정을 통하면 log n 이 중간에 있는 노드를 더 적게 가므로 더 짧은 log n이 된다! 쉽지 않다…ㅎㅎ","position":{"start":{"line":144,"column":1,"offset":3339},"end":{"line":144,"column":65,"offset":3403}}}],"position":{"start":{"line":144,"column":1,"offset":3339},"end":{"line":144,"column":65,"offset":3403}}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#느낀점","title":null,"children":[],"data":{"hProperties":{"aria-label":"느낀점 permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"느낀점","position":{"start":{"line":146,"column":4,"offset":3408},"end":{"line":146,"column":7,"offset":3411}}}],"position":{"start":{"line":146,"column":1,"offset":3405},"end":{"line":146,"column":7,"offset":3411}},"data":{"id":"느낀점","htmlAttributes":{"id":"느낀점"},"hProperties":{"id":"느낀점","style":"position:relative;"}}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"진짜 조금 더 빠르게 할려는 방법을 찾는게 대박이다…","position":{"start":{"line":148,"column":3,"offset":3415},"end":{"line":148,"column":34,"offset":3446}}}],"position":{"start":{"line":148,"column":3,"offset":3415},"end":{"line":148,"column":34,"offset":3446}}}],"position":{"start":{"line":148,"column":1,"offset":3413},"end":{"line":148,"column":34,"offset":3446}}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"이제 본격적으로 이거를 그래프 알고리즘에 써먹어봐야겠다.","position":{"start":{"line":149,"column":3,"offset":3449},"end":{"line":149,"column":34,"offset":3480}}}],"position":{"start":{"line":149,"column":3,"offset":3449},"end":{"line":149,"column":34,"offset":3480}}}],"position":{"start":{"line":149,"column":1,"offset":3447},"end":{"line":149,"column":34,"offset":3480}}}],"position":{"start":{"line":148,"column":1,"offset":3413},"end":{"line":149,"column":34,"offset":3480}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":150,"column":1,"offset":3481}}}}