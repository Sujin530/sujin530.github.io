{"expireTime":9007200896899831000,"key":"transformer-remark-markdown-html-47536b659ec38625ebf3e576006292a7-gatsby-remark-imagesgatsby-remark-table-of-contentsgatsby-remark-prismjsgatsby-remark-autolink-headersgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":"<h2 id=\"shortest-path\" style=\"position:relative;\"><a href=\"#shortest-path\" aria-label=\"shortest path permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Shortest Path</h2>\n<p>최단경로를 찾는 문제의 특징은 다음과 같다.</p>\n<ul>\n<li>Input : directed graph G = (V, E) with weight function w : E -> R</li>\n<li>S에서 D까지의 minimum weight을 가지는 path를 찾는 문제이다.</li>\n<li>Weight w(p) of path p : p로 가는 길에 있는 모든 edge weight의 합이다.</li>\n<li>u부터 v 까지의 shortest-path weight은 다음으로 표현한다</li>\n<li>S(u,v) = if path가 있으면 u부터 v까지 오는 path 중의 min . 없으면 무한대</li>\n</ul>\n<h2 id=\"variants\" style=\"position:relative;\"><a href=\"#variants\" aria-label=\"variants permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Variants</h2>\n<p>최단거리를 찾는 문제는 크게 4종류가 있다.</p>\n<ol>\n<li>Single-source shortest path : 하나의 S에서 모든 vertex까지 최단거리</li>\n<li>Single-destinations : 모든 vertex에서 하나의 D까지의 최단거리</li>\n<li>Single-pair : 하나의 S로 부터 모든 하나의 D까지의 최단거리</li>\n<li>All-pair : 모든 vertex의 서로간의 최단거리</li>\n</ol>\n<p>1~3번 : Bellman-Ford, DAG, Dijkstara 알고리즘\n4번 : Floyd 알고리즘</p>\n<h2 id=\"문제-특징\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%8A%B9%EC%A7%95\" aria-label=\"문제 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 특징</h2>\n<ul>\n<li>Optimal substructure이 존재한다! 그러므로 Greedy Algorithm으로 접근 가능!</li>\n<li>Negative Cycle이 존재하면 절대 안돼! 왜냐하면 그럼 그 Cycle을 계속 돌면서 음의 무한대로 값이 떨어질 것이기 때문이다!</li>\n</ul>\n<h3 id=\"shortest-path란\" style=\"position:relative;\"><a href=\"#shortest-path%EB%9E%80\" aria-label=\"shortest path란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>shortest path란?</h3>\n<p>S(u,v) &#x3C;= S(u,x) + S(x, v) 이다.\n즉, 한번 거쳐가는 게 무조건 크거나 같다.</p>\n<p>Shortest path는 Cycle이 없다.</p>\n<h2 id=\"single-source-shortest-path\" style=\"position:relative;\"><a href=\"#single-source-shortest-path\" aria-label=\"single source shortest path permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Single Source Shortest Path</h2>\n<p>먼저 하나의 Source를 가지는 문제를 풀어보자.</p>\n<ul>\n<li>1개의 s에 대해서 모든 vertex v로 가는 최단경로를 찾는 문제이다.</li>\n<li>d[v] = S[s, v]를 의미</li>\n<li>초기에 d[v]는 무한대인데 알고리즘을 돌면서 값이 줄어들 것이다.</li>\n<li>p[v] = 바로 이전 vertex를 의미한다.</li>\n<li>p를 이용해서 shortest-path tree를 만들 수 있다.</li>\n</ul>\n<p>그럼 이번에는 코드를 봐보자</p>\n<h2 id=\"초기화-코드\" style=\"position:relative;\"><a href=\"#%EC%B4%88%EA%B8%B0%ED%99%94-%EC%BD%94%EB%93%9C\" aria-label=\"초기화 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>초기화 코드</h2>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">INIT<span class=\"token operator\">-</span>SINGLE<span class=\"token operator\">-</span><span class=\"token function\">SOURCE</span><span class=\"token punctuation\">(</span>V<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> each v <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> V\n        <span class=\"token keyword\">do</span> d<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> INFINITE\n            p<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> NIL\n    d<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span></code></pre></div>\n<p>모든 V에 있는 vertext까지의 거리를 무한대로 만들어주고 P를 초기화해준다.\n그리고 시작점인 s의 거리만 0으로 만들어준다.</p>\n<h2 id=\"relaxation짧은-길-찾기\" style=\"position:relative;\"><a href=\"#relaxation%EC%A7%A7%EC%9D%80-%EA%B8%B8-%EC%B0%BE%EA%B8%B0\" aria-label=\"relaxation짧은 길 찾기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Relaxation(짧은 길 찾기)</h2>\n<p>이것이 사실상 핵심이다!! 더 짧은 길이 발견되면 바로 환승하는 과정이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token function\">Relax</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> d<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> w<span class=\"token punctuation\">)</span>\n        then d<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> d<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>w<span class=\"token punctuation\">;</span>\n                p<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> u<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>u는 s와 v 사이에 vertex이고 w는 u와 v 사이의 weight이다.</li>\n<li>만일 v까지 현재 최단 경로 d[v]보다 d[u]를 거치고 가는게 더 빠르면 환승한다.</li>\n</ul>\n<h2 id=\"bellman-ford-algorithm\" style=\"position:relative;\"><a href=\"#bellman-ford-algorithm\" aria-label=\"bellman ford algorithm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bellman-Ford algorithm</h2>\n<p>이 알고리즘은 edge weight가 음수여도 할 수 있다.\n그래도 여전히 negative-weight cycle은 안돼!!</p>\n<p>일단 코드를 봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">BELLMAN<span class=\"token operator\">-</span><span class=\"token function\">FORD</span><span class=\"token punctuation\">(</span>V<span class=\"token punctuation\">,</span> E<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span>\n<span class=\"token number\">1.</span>  INIT<span class=\"token operator\">-</span>SINGLE<span class=\"token operator\">-</span><span class=\"token function\">SOURCE</span><span class=\"token punctuation\">(</span>V<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token number\">2.</span>  <span class=\"token keyword\">for</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span> to <span class=\"token operator\">|</span>V<span class=\"token operator\">|</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n<span class=\"token number\">3.</span>      <span class=\"token keyword\">do</span> <span class=\"token keyword\">for</span> each <span class=\"token function\">edge</span> <span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> E\n<span class=\"token number\">4.</span>          <span class=\"token keyword\">do</span> <span class=\"token function\">RELAX</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">)</span>\n<span class=\"token number\">5.</span>  <span class=\"token keyword\">for</span> each <span class=\"token function\">edge</span> <span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> E\n<span class=\"token number\">6.</span>      <span class=\"token keyword\">do</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> d<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token function\">w</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">7.</span>          then <span class=\"token keyword\">return</span> FALSE\n<span class=\"token number\">8.</span>  <span class=\"token keyword\">return</span> TRUE</code></pre></div>\n<ul>\n<li>Line 1 : 초기화</li>\n<li>Line 2 : vertex 수 - 1 번 반복해</li>\n<li>Line 3,4 : edge를 하나씩 꺼내가지고 Relax시켜</li>\n<li>Line 5,6 : 또 edge에서 하나씩 꺼내서 Relax시켜봐</li>\n<li>Line 7,8 : Relax 또 되면 negative cycle이 있는거여 return False</li>\n</ul>\n<p>이 코드는 모든 E를 훑는 과정을 V-1번 반복하기 때문에 시간은 O(VE) 가 걸린다.</p>\n<h2 id=\"in-dagdirected-acycling-graph\" style=\"position:relative;\"><a href=\"#in-dagdirected-acycling-graph\" aria-label=\"in dagdirected acycling graph permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>in DAG(Directed Acycling Graph)</h2>\n<p>사이클이 없다는 전제하에 이 알고리즘을 쓸 수 있다.\nTopological sort를 이용하면 Bellman-Ford의 V-1번 반복하는 과정을 하나로 줄일 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">DAG<span class=\"token operator\">-</span>SHORTEST<span class=\"token operator\">-</span><span class=\"token function\">PATHS</span><span class=\"token punctuation\">(</span>V<span class=\"token punctuation\">,</span>E<span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span>\n    topologically sort the vertices\n    INIT<span class=\"token operator\">-</span>SINGLE<span class=\"token operator\">-</span><span class=\"token function\">SOURCE</span><span class=\"token punctuation\">(</span>V<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> each vertex u<span class=\"token punctuation\">,</span> take in topologically sorted order\n        <span class=\"token keyword\">do</span> <span class=\"token keyword\">for</span> each vertex v <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> Adj<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">do</span> <span class=\"token function\">RELAX</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">)</span></code></pre></div>\n<p>이렇게 진행하면 타임이 O(V+E)로 확 줄게 된다!!</p>\n<p>잠깐!! 여기서 Topological Sort 뭔지 정확히 집고 넘어가자.</p>\n<h3 id=\"topological-sort\" style=\"position:relative;\"><a href=\"#topological-sort\" aria-label=\"topological sort permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Topological Sort</h3>\n<p>DFS를 이용해서 모든 vertex의 Finish Time을 다 구한 다음에 Finish Time이 큰 순서대로 Sorting하는 거를 말한다.</p>\n<p>옷 입는 순서와 같이 앞에 꺼가 끝나지 않으면 일이 진행되지 않을 때 일의 순서를 정하는데 사용된다.</p>\n<h2 id=\"dijkstra-algorithm다익스트라-알고리즘\" style=\"position:relative;\"><a href=\"#dijkstra-algorithm%EB%8B%A4%EC%9D%B5%EC%8A%A4%ED%8A%B8%EB%9D%BC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-label=\"dijkstra algorithm다익스트라 알고리즘 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dijkstra Algorithm(다익스트라 알고리즘)</h2>\n<ul>\n<li>negative edge가 없는 경우에만 사용된다.</li>\n<li>BFS를 이용해서 vertex를 priority queue(pq)에 넣고 tree를 확장해나간다.</li>\n</ul>\n<p>2개의 Vertex set이 존재해서 S는 최종, Q는 vertex가 담겨져있는 pq이다.\nQ에서 하나씩 꺼내기를 반복하면서 최단거리를 찾고 꺼낸 vertex를 S에 넣는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token function\">DIJKSTRA</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token number\">1.</span>  INIT<span class=\"token operator\">-</span>SINGLE<span class=\"token operator\">-</span><span class=\"token function\">SOURCE</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token number\">2.</span>  S <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> <span class=\"token constant\">NULL</span>\n<span class=\"token number\">3.</span>  Q <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> V<span class=\"token punctuation\">[</span>G<span class=\"token punctuation\">]</span>\n<span class=\"token number\">4.</span>  <span class=\"token keyword\">while</span> Q <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span>\n<span class=\"token number\">5.</span>  <span class=\"token keyword\">do</span> u <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> EXTRACT<span class=\"token operator\">-</span><span class=\"token function\">MIN</span><span class=\"token punctuation\">(</span>Q<span class=\"token punctuation\">)</span>\n<span class=\"token number\">6.</span>      S <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> S <span class=\"token operator\">+</span> U\n<span class=\"token number\">7.</span>      <span class=\"token keyword\">for</span> each vertex v <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> Adj<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span>\n<span class=\"token number\">8.</span>          <span class=\"token keyword\">do</span> <span class=\"token function\">RELAX</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">)</span></code></pre></div>\n<p>즉, pq에서 하나씩 꺼내면서 꺼낸 vertex와 근접한 원소를 relax시켜주고 꺼낸 원소를 S에 넣는다.</p>"}