{"expireTime":9007200896899831000,"key":"transformer-remark-markdown-html-c73229ebc6030c35c8e78964c7833ef6-gatsby-remark-imagesgatsby-remark-table-of-contentsgatsby-remark-prismjsgatsby-remark-autolink-headersgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":"<h2 id=\"링크드-리스트\" style=\"position:relative;\"><a href=\"#%EB%A7%81%ED%81%AC%EB%93%9C-%EB%A6%AC%EC%8A%A4%ED%8A%B8\" aria-label=\"링크드 리스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>링크드 리스트</h2>\n<p>링크드 리스트는 나의 오랜 숙적이다. 항상 최후의 방법으로 미뤄놓는 방법인데 알고리즘을 하면서 링크드 리스트를 사용하지 않고는 풀기 어려운 문제가 나와서 하는 수 없이 정리를 해본다ㅎㅎ</p>\n<h2 id=\"더블-링크드-리스트란\" style=\"position:relative;\"><a href=\"#%EB%8D%94%EB%B8%94-%EB%A7%81%ED%81%AC%EB%93%9C-%EB%A6%AC%EC%8A%A4%ED%8A%B8%EB%9E%80\" aria-label=\"더블 링크드 리스트란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>더블 링크드 리스트란?</h2>\n<p>보통 링크드 리스트라고 하면 다음 원소가 무엇인지(next)를 포인터로 연결해놓게 된다. 하지만 더블 링크드 리스트는 이전 원소의 값도 알려주는(prev) 포인터가 존재한다.</p>\n<p>더블 링크드 리스트는 지금 element 이후와 이전의 원소 정보가 모두 필요할 때 사용한다.</p>\n<p>ex) <strong>원소 정방향, 역방향으로 출력하기</strong></p>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<p><a href=\"https://hijuworld.tistory.com/55\">더블 링크드 리스트 참고 사이트</a></p>\n<p><strong>여기서 tail이 움직일 수 있게 코드를 수정했다.</strong></p>\n<h2 id=\"node-구조체\" style=\"position:relative;\"><a href=\"#node-%EA%B5%AC%EC%A1%B0%EC%B2%B4\" aria-label=\"node 구조체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Node 구조체</h2>\n<p>Node를 추가할 때는 ptr 정보를 같이 받아와서 ptr 바로 뒤에다가 새로 생성된 노드를 연결시켜준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> data <span class=\"token operator\">=</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">;</span>\n    Node<span class=\"token operator\">*</span> next<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> prev<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        next <span class=\"token operator\">=</span> prev <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n        data <span class=\"token operator\">=</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c<span class=\"token punctuation\">,</span> Node<span class=\"token operator\">*</span> ptr<span class=\"token punctuation\">)</span><span class=\"token comment\">//ptr 뒤에 추가</span>\n    <span class=\"token punctuation\">{</span>\n        data <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n        prev <span class=\"token operator\">=</span> ptr<span class=\"token punctuation\">;</span>\n        next <span class=\"token operator\">=</span> ptr<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n        next<span class=\"token operator\">-></span>prev <span class=\"token operator\">=</span> prev<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">selvDelete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        prev<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n        next<span class=\"token operator\">-></span>prev <span class=\"token operator\">=</span> prev<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">delete</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"double-linked-list-구조체\" style=\"position:relative;\"><a href=\"#double-linked-list-%EA%B5%AC%EC%A1%B0%EC%B2%B4\" aria-label=\"double linked list 구조체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Double Linked List 구조체</h2>\n<p>더블 링크드 리스트에서 더미를 head와 tail에 놔둬서 링크드 리스트가 범위를 초과하지 않을 수 있게 도와준다.</p>\n<ul>\n<li>새로운 원소가 추가될 때는 tail 앞에 추가 해주고(추가 후에도 tail 뒤에 있는 원소는 동일하다)</li>\n<li>tail은 움직일 수 있게 해서 중간에 원소를 추가하거나 삭제할 수 있게 해주었다.</li>\n<li>출력은 head가 더미이기 때문에 head 다음 원소부터 끝 원소까지</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">DLinkedList</span> <span class=\"token punctuation\">{</span>\n    Node <span class=\"token operator\">*</span>head<span class=\"token punctuation\">;</span>\n    Node <span class=\"token operator\">*</span>tail<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">DLinkedList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//생성자</span>\n        count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        head <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//더미를 선언해서 가지고 있게한다.</span>\n        tail <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//더미를 선언해서 가지고 있게한다.</span>\n        head<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> tail<span class=\"token punctuation\">;</span> <span class=\"token comment\">//서로연결한다.</span>\n        tail<span class=\"token operator\">-></span>prev <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">endInsert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//tail 앞에 추가한다.</span>\n    <span class=\"token keyword\">new</span> <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> tail<span class=\"token operator\">-></span>prev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">moveRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tail <span class=\"token operator\">-></span> data <span class=\"token operator\">==</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    tail <span class=\"token operator\">=</span> tail <span class=\"token operator\">-></span> next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">moveLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tail<span class=\"token operator\">-></span>prev <span class=\"token operator\">==</span> head<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    tail <span class=\"token operator\">=</span> tail <span class=\"token operator\">-></span> prev<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">endDelete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//tail 앞에 제거한다.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tail<span class=\"token operator\">-></span>prev <span class=\"token operator\">==</span> head<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    tail<span class=\"token operator\">-></span>prev<span class=\"token operator\">-></span><span class=\"token function\">selvDelete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">printAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Node<span class=\"token operator\">*</span> tmp <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>tmp<span class=\"token operator\">-></span>next <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            cout<span class=\"token operator\">&lt;&lt;</span> tmp<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span>\n            tmp <span class=\"token operator\">=</span> tmp<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"최종-예제-코드백준-1406번\" style=\"position:relative;\"><a href=\"#%EC%B5%9C%EC%A2%85-%EC%98%88%EC%A0%9C-%EC%BD%94%EB%93%9C%EB%B0%B1%EC%A4%80-1406%EB%B2%88\" aria-label=\"최종 예제 코드백준 1406번 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>최종 예제 코드(백준 1406번)</h2>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdlib></span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> data <span class=\"token operator\">=</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">;</span>\n    Node<span class=\"token operator\">*</span> next<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> prev<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        next <span class=\"token operator\">=</span> prev <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n        data <span class=\"token operator\">=</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c<span class=\"token punctuation\">,</span> Node<span class=\"token operator\">*</span> ptr<span class=\"token punctuation\">)</span><span class=\"token comment\">//ptr 뒤에 추가</span>\n    <span class=\"token punctuation\">{</span>\n        data <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n        prev <span class=\"token operator\">=</span> ptr<span class=\"token punctuation\">;</span>\n        next <span class=\"token operator\">=</span> ptr<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n        next<span class=\"token operator\">-></span>prev <span class=\"token operator\">=</span> prev<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">selvDelete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        prev<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n        next<span class=\"token operator\">-></span>prev <span class=\"token operator\">=</span> prev<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">delete</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">DLinkedList</span> <span class=\"token punctuation\">{</span>\n    Node <span class=\"token operator\">*</span>head<span class=\"token punctuation\">;</span>\n    Node <span class=\"token operator\">*</span>tail<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">DLinkedList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//생성자</span>\n        count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        head <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//더미를 선언해서 가지고 있게한다.</span>\n        tail <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//더미를 선언해서 가지고 있게한다.</span>\n        head<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> tail<span class=\"token punctuation\">;</span> <span class=\"token comment\">//서로연결한다.</span>\n        tail<span class=\"token operator\">-></span>prev <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">endInsert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//tail 앞에 추가한다.</span>\n        <span class=\"token keyword\">new</span> <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> tail<span class=\"token operator\">-></span>prev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">moveRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tail <span class=\"token operator\">-></span> data <span class=\"token operator\">==</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        tail <span class=\"token operator\">=</span> tail <span class=\"token operator\">-></span> next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">moveLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tail<span class=\"token operator\">-></span>prev <span class=\"token operator\">==</span> head<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        tail <span class=\"token operator\">=</span> tail <span class=\"token operator\">-></span> prev<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">endDelete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//tail 앞에 제거한다.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tail<span class=\"token operator\">-></span>prev <span class=\"token operator\">==</span> head<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        tail<span class=\"token operator\">-></span>prev<span class=\"token operator\">-></span><span class=\"token function\">selvDelete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">printAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Node<span class=\"token operator\">*</span> tmp <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>tmp<span class=\"token operator\">-></span>next <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            cout<span class=\"token operator\">&lt;&lt;</span> tmp<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span>\n            tmp <span class=\"token operator\">=</span> tmp<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    DLinkedList <span class=\"token operator\">*</span>list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">DLinkedList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> cmd<span class=\"token punctuation\">,</span> input<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        cin <span class=\"token operator\">>></span> cmd<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cmd <span class=\"token operator\">==</span> <span class=\"token string\">'P'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            cin <span class=\"token operator\">>></span> input<span class=\"token punctuation\">;</span>\n            list<span class=\"token operator\">-></span><span class=\"token function\">endInsert</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cmd <span class=\"token operator\">==</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            list<span class=\"token operator\">-></span><span class=\"token function\">moveRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cmd <span class=\"token operator\">==</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            list<span class=\"token operator\">-></span><span class=\"token function\">endDelete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cmd <span class=\"token operator\">==</span> <span class=\"token string\">'L'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            list<span class=\"token operator\">-></span><span class=\"token function\">moveLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    list<span class=\"token operator\">-></span><span class=\"token function\">printAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"주의할점\" style=\"position:relative;\"><a href=\"#%EC%A3%BC%EC%9D%98%ED%95%A0%EC%A0%90\" aria-label=\"주의할점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>주의할점</h2>\n<ul>\n<li>링크드 리스트 문제는 아무리 간단한 문제라도 그리자 제발…</li>\n<li>제발 쉽다고 막 짜지 말아요ㅠㅠㅠ</li>\n</ul>"}